<?php
require_once 'vendor/autoload.php';

$app = require_once 'bootstrap/app.php';
$app->make('Illuminate\Contracts\Console\Kernel')->bootstrap();

echo "üîç TEST ULTRA-SIMPLE DU BOUTON\n";
echo "==============================\n\n";

try {
    // Test 1: V√©rifier que le formulaire HTML est g√©n√©r√© correctement
    echo "1Ô∏è‚É£ Test de g√©n√©ration du formulaire HTML...\n";
    
    $getRequest = \Illuminate\Http\Request::create('/login-debug', 'GET');
    $getResponse = $app->handle($getRequest);
    
    if ($getResponse->getStatusCode() === 200) {
        echo "   ‚úÖ Page charg√©e (Status 200)\n";
        
        $content = $getResponse->getContent();
        
        // V√©rifier la pr√©sence du bouton
        if (strpos($content, 'id="submitBtn"') !== false) {
            echo "   ‚úÖ Bouton submit trouv√© avec id='submitBtn'\n";
        } else {
            echo "   ‚ùå Bouton submit NON trouv√©\n";
        }
        
        // V√©rifier le type du bouton
        if (strpos($content, 'type="submit"') !== false) {
            echo "   ‚úÖ Bouton a bien type='submit'\n";
        } else {
            echo "   ‚ùå Bouton n'a PAS type='submit'\n";
        }
        
        // V√©rifier que le bouton est dans le formulaire
        if (strpos($content, '<form') !== false && strpos($content, '</form>') !== false) {
            echo "   ‚úÖ Formulaire HTML valide\n";
            
            // Extraire le formulaire pour analyse
            preg_match('/<form[^>]*>.*?<\/form>/s', $content, $matches);
            if (!empty($matches[0])) {
                $form = $matches[0];
                echo "   üìù Formulaire extrait:\n";
                echo "   " . str_replace("\n", "\n   ", substr($form, 0, 300)) . "...\n";
            }
        } else {
            echo "   ‚ùå Formulaire HTML invalide\n";
        }
        
        // V√©rifier les attributs du bouton
        if (strpos($content, 'disabled') !== false) {
            echo "   ‚ö†Ô∏è Bouton a l'attribut 'disabled'\n";
        } else {
            echo "   ‚úÖ Bouton n'est pas d√©sactiv√©\n";
        }
        
        // V√©rifier les classes CSS du bouton
        if (strpos($content, 'class=') !== false) {
            echo "   ‚úÖ Bouton a des classes CSS\n";
        } else {
            echo "   ‚ö†Ô∏è Bouton n'a pas de classes CSS\n";
        }
        
    } else {
        echo "   ‚ùå Page non charg√©e (Status: " . $getResponse->getStatusCode() . ")\n";
    }
    
    // Test 2: V√©rifier que le JavaScript est bien charg√©
    echo "\n2Ô∏è‚É£ Test du JavaScript...\n";
    
    if (strpos($content, '<script>') !== false) {
        echo "   ‚úÖ Balise script trouv√©e\n";
        
        // V√©rifier la pr√©sence des fonctions JavaScript
        if (strpos($content, 'addEventListener') !== false) {
            echo "   ‚úÖ addEventListener trouv√©\n";
        } else {
            echo "   ‚ùå addEventListener NON trouv√©\n";
        }
        
        if (strpos($content, 'preventDefault') !== false) {
            echo "   ‚úÖ preventDefault trouv√©\n";
        } else {
            echo "   ‚ùå preventDefault NON trouv√©\n";
        }
        
        if (strpos($content, 'fetch(') !== false) {
            echo "   ‚úÖ fetch() trouv√©\n";
        } else {
            echo "   ‚ùå fetch() NON trouv√©\n";
        }
        
    } else {
        echo "   ‚ùå Aucune balise script trouv√©e\n";
    }
    
    // Test 3: V√©rifier les routes
    echo "\n3Ô∏è‚É£ Test des routes...\n";
    
    $routes = $app['router']->getRoutes();
    $loginRoute = null;
    $loginDebugRoute = null;
    
    foreach ($routes as $route) {
        if ($route->uri() === 'login' && in_array('POST', $route->methods())) {
            $loginRoute = $route;
        }
        if ($route->uri() === 'login-debug' && in_array('GET', $route->methods())) {
            $loginDebugRoute = $route;
        }
    }
    
    if ($loginRoute) {
        echo "   ‚úÖ Route POST /login trouv√©e\n";
        echo "     Action: " . $loginRoute->getActionName() . "\n";
    } else {
        echo "   ‚ùå Route POST /login NON trouv√©e\n";
    }
    
    if ($loginDebugRoute) {
        echo "   ‚úÖ Route GET /login-debug trouv√©e\n";
    } else {
        echo "   ‚ùå Route GET /login-debug NON trouv√©e\n";
    }
    
    // Test 4: V√©rifier la structure du DOM
    echo "\n4Ô∏è‚É£ Analyse de la structure du DOM...\n";
    
    // V√©rifier que le bouton est bien dans le formulaire
    if (strpos($content, 'id="debugForm"') !== false) {
        echo "   ‚úÖ Formulaire avec id='debugForm' trouv√©\n";
        
        // V√©rifier la s√©quence: form -> button
        $formStart = strpos($content, 'id="debugForm"');
        $buttonStart = strpos($content, 'id="submitBtn"');
        
        if ($formStart !== false && $buttonStart !== false) {
            if ($buttonStart > $formStart) {
                echo "   ‚úÖ Bouton est bien apr√®s le formulaire (structure correcte)\n";
            } else {
                echo "   ‚ùå Bouton est AVANT le formulaire (structure incorrecte)\n";
            }
        }
        
    } else {
        echo "   ‚ùå Formulaire avec id='debugForm' NON trouv√©\n";
    }
    
} catch (Exception $e) {
    echo "‚ùå Erreur: " . $e->getMessage() . "\n";
    echo "Fichier: " . $e->getFile() . "\n";
    echo "Ligne: " . $e->getLine() . "\n";
}

echo "\nüéØ TEST TERMIN√â\n";
?> 